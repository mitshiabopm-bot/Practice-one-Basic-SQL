--Q1 Display all columns for all transactions. Expected output: All columns--


select*
from retail.sales.dataset;

--Q2 Display only the Transaction ID, Date, and Customer ID for all records. Expected output: Transaction ID, Date, Customer ID--

SELECT transaction_id,
        date,
        customer_id
FROM retail.sales.dataset;

--Q3 Display all the distinct product categories in the dataset--

select distinct product_category
FROM retail.sales.dataset;

--Q4 Display all the distinct gender values in the dataset--

select distinct gender
FROM retail.sales.dataset;

--Q5 Display all transactions where the Age is greater than 40--

SELECT*
FROM retail.sales.dataset
WHERE age > 40;

--Q6 Display all transactions where the Price per Unit is between 100 and 500.--

SELECT*
FROM retail.sales.dataset
where price_per_unit between 100 and 500;

--(Q7). Display all transactions where the Product Category is either 'Beauty' or 'Electronics'--

SELECT*
FROM retail.sales.dataset
WHERE product_category ='Beauty' or product_category='Electronics';

--2nd option--

SELECT*
FROM retail.sales.dataset
WHERE product_category IN ('Beauty','Electronics');

SELECT*
FROM retail.sales.dataset
WHERE product_category = 'Beauty' or product_category ='Electronics';

SELECT*
FROM retail.sales.dataset
WHERE total_amount = 30 or total_amount = 100;

SELECT*
FROM retail.sales.dataset
where total_amount in (30,100);
 
--Q8. Display all transactions where the Product Category is not 'Clothing'--.


SELECT*
FROM retail.sales.dataset
WHERE total_amount not in (30,100);

SELECT*
FROM retail.sales.dataset
WHERE total_amount != 30 and  total_amount !=100;

---"Or" can result on getting 1 of the escluded amount because when 1 is not there the other can be there 

SELECT*
FROM retail.sales.dataset
WHERE total_amount != 30 or  total_amount !=100;

--2nd option--

SELECT*
FROM retail.sales.dataset
WHERE product_category not in ('Clothing');

--3rd option--

SELECT*
FROM retail.sales.dataset
WHERE product_category <> 'Clothing';



--Q9. Display all transactions where the Quantity is greater than or equal to 3. Expected output: All columns--

SELECT*
FROM retail.sales.dataset
WHERE QUANTITY >=3;

SELECT*
FROM retail.sales.dataset
WHERE age >= 30;

SELECT*
FROM retail.sales.dataset
WHERE age != 30;

SELECT*
FROM retail.sales.dataset
WHERE age between 30 and 45;

SELECT*
FROM retail.sales.dataset
WHERE age in  (30 , 45);

SELECT*
FROM retail.sales.dataset
WHERE age not in  (30 , 45);

--Q10. Count the total number of transactions--

SELECT count(transaction_id) as numder_of_transactions
FROM retail.sales.dataset;


select count(TRANSACTION_ID) as Number_ of_transactions
FROM retail.sales.dataset;
WHERE gender = 'Female';

select count(gender) as femele_gender
FROM retail.sales.dataset
where gender = 'Female';

select count(gender) as Male_gender
FROM retail.sales.dataset
where gender != 'Female';


--Q11. Find the average Age of customers--

select*
FROM retail.sales.dataset;

select sum(quantity) as total_quantity
FROM retail.sales.dataset;


SELECT AVG(age) as average_age
FROM retail.sales.dataset;


--Q12. Find the total quantity of products sold--

SELECT SUM(quantity) as Total_quantity
FROM retail.sales.dataset;

select*
from retail.sales.dataset;

select avg(price_per_unit) as average_price_for_female
from retail.sales.dataset
where gender = 'Female';

select avg(price_per_unit) as average_price_for_male
from retail.sales.dataset
where gender = 'Male';

select max(price_per_unit) as maximum_price_for_male
from retail.sales.dataset
where gender = 'Male';

select min(price_per_unit) as maximum_price_for_male
from retail.sales.dataset
where gender = 'Male';

select max(price_per_unit) as maximum_price_for_female
from retail.sales.dataset
where gender = 'female';

select min(price_per_unit) as maximum_price_for_female
from retail.sales.dataset
where gender = 'Female';

select sum(total_amount) as female_expenses
from retail.sales.dataset
where gender = 'Female';

select sum(total_amount) as male_expenses
from retail.sales.dataset
where gender = 'Male';

--Q13. Find the maximum Total Amount spent in a single transaction--

select max(total_amount) as max_total_amount
FROM retail.sales.dataset;

--Q14. Find the minimum Price per Unit in the dataset--

select max(price_per_unit) as min_price_per_unit
FROM retail.sales.dataset;

--Q15.Find the number of transactions per Product Category--

SELECT 'product_category',
sum(quantity) as quantity_sold
from retail.sales.dataset
where product_category = 'Beauty'
GROUP BY 'product_category';

SELECT distinct'gender',
sum(quantity) as quantity_sold
from retail.sales.dataset
GROUP BY 'gender';

SELECT 'gender',
sum(quantity) as quantity_sold
from retail.sales.dataset
where gender = 'Female'
GROUP BY 'gender';


SELECT 'gender',
sum(quantity) as quantity_sold
from retail.sales.dataset
where gender = 'Male'
GROUP BY 'gender';

select count(transaction_id)
FROM retail.sales.dataset;


select*
FROM retail.sales.dataset;

SELECT 'product_category',
COUNT(transaction_id) as transactions_count
from retail.sales.dataset
GROUP BY 'product_category'

select*
from retail.sales.dataset;

--Q16. Find the total revenue (Total Amount) per gender--

SELECT 'gender',
sum(total_amount) as total_revenue
from retail.sales.dataset
GROUP BY 'gender';

--Q17. Find the average Price per Unit per product category--

SELECT 'product_category',
AVG(price_per_unit) as average_price
from retail.sales.dataset
GROUP BY 'product_category';

SELECT 'product_category',
    AVG(Price_Per_Unit) AS Average_Price
FROM retail.sales.dataset
GROUP BY 'product_Category;

--Q18. Find the total revenue per product category where total revenue is greater than 10,000--

select 'product-category',
SUM(total_amount) as total_revenue
from retail.sales.dataset
group by'product_category'
having sum(total_amount) > 10000;

--Q19. Find the average quantity per product category where the average is more than 2.--

select 'product-category',
avg(quantity) as average_quantity
from retail.sales.dataset
group by'product_category'
having avg(quantity) > 2;

--Q20. Display a column called Spending_Level that shows 'High' if Total Amount > 1000, otherwise 'Low'--


select transaction_id,
       Total_amount,
       CASE
           WHEN total_amount > 1000 Then 'High'
           ELSE 'Low'
       END as spendind_level
FROM retail.sales.dataset;

--Q21. Display a new column called Age_Group that labels customers as:
'Youth' if Age < 30
'Adult' if Age is between 30 and 59
'Senior' if Age >= 60

select Customer_id,
       Age,
       CASE
       WHEN Age < 30 THEN 'Youth'
       WHEN Age between 30 and 59 THEN 'Adult'
       ELSE 'Senior'
       END AS Age_Group
FROM retail.sales.dataset;
